// Importamos o modelo de usu√°rio que criamos
// √â como pegar o molde de bolinhos para fazer v√°rios bolinhos
const User = require('../models/User');

// Verifica√ß√£o para garantir que o modelo est√° carregando corretamente
console.log("Modelo User carregado:", typeof User, Object.keys(User));

// Criamos um objeto que vai conter todas as fun√ß√µes do controlador
// √â como uma caixa de ferramentas com v√°rias ferramentas diferentes
const userController = {
  
  // Fun√ß√£o para listar todos os usu√°rios
  // √â como abrir a gaveta e ver todos os usu√°rios que temos
  getAllUsers: async (req, res) => {
    try {
      // Buscamos todos os usu√°rios no banco de dados
      // √â como pedir para algu√©m: "me mostra todos os usu√°rios que voc√™ tem"
      const users = await User.find().select('-senha'); // N√£o mostramos a senha por seguran√ßa
      
      // Enviamos os usu√°rios como resposta
      // √â como entregar a lista de usu√°rios para quem pediu
      res.send(users);
      
      // Mostramos uma mensagem de sucesso no console
      console.log('Usu√°rios listados com sucesso! üë®‚Äçüë©‚Äçüëß‚Äçüë¶');
    } catch (error) {
      // Se der erro, enviamos uma mensagem de erro
      // √â como dizer: "Ops, n√£o consegui encontrar os usu√°rios!"
      res.status(500).send("Erro ao listar usu√°rios: " + error.message);
      console.error('Erro ao listar usu√°rios:', error);
    }
  },
  
  // Fun√ß√£o para adicionar um novo usu√°rio
  // √â como criar um novo bonequinho e colocar na gaveta
  createUser: async (req, res) => {
    try {
      // Verificamos se as senhas batem (a senha e a confirma√ß√£o)
      // √â como verificar se duas pe√ßas de quebra-cabe√ßa encaixam
      if (req.body.senha !== req.body.confirmaSenha) {
        return res.status(400).send("As senhas n√£o coincidem! üîë");
      }
      
      // Verificamos se j√° existe um usu√°rio com este email
      // √â como olhar na gaveta se j√° tem um boneco com o mesmo nome
      const usuarioExistente = await User.findOne({ email: req.body.email });
      if (usuarioExistente) {
        return res.status(400).send("Este email j√° est√° sendo usado! üìß");
      }
      
      // Criamos um novo usu√°rio com os dados enviados na requisi√ß√£o
      // √â como pegar massinha e fazer um boneco seguindo um desenho
      const user = new User({
        nome: req.body.nome,                 // O nome simples
        nomeCompleto: req.body.nomeCompleto, // O nome completo
        email: req.body.email,               // O email (novo campo!)
        senha: req.body.senha                // A senha (novo campo!)
        // A data de cria√ß√£o √© autom√°tica, n√£o precisamos informar
      });
      
      // Salvamos o usu√°rio no banco de dados
      // √â como guardar o boneco na gaveta
      await user.save();
      
      // Criamos uma c√≥pia do usu√°rio sem a senha para enviar como resposta
      // √â como tirar uma foto do boneco, mas sem mostrar uma parte dele
      const userSemSenha = {
        _id: user._id,
        nome: user.nome,
        nomeCompleto: user.nomeCompleto,
        email: user.email,
        dataCriacao: user.dataCriacao
      };
      
      // Enviamos uma mensagem de sucesso como resposta
      // √â como dizer: "Prontinho! Usu√°rio criado!"
      res.status(201).send({
        message: "Usu√°rio salvo com sucesso! üë§",
        user: userSemSenha // Enviamos o usu√°rio sem a senha
      });
      console.log('Novo usu√°rio adicionado:', user.nome);
    } catch (error) {
      // Se der erro, enviamos uma mensagem de erro
      // √â como dizer: "Puxa, n√£o consegui criar o usu√°rio..."
      res.status(500).send("Erro ao salvar usu√°rio: " + error.message);
      console.error('Erro ao salvar usu√°rio:', error);
    }
  },
  
  // Fun√ß√£o para fazer login
  // √â como verificar se a pessoa tem a chave certa para entrar na casa
  login: async (req, res) => {
    try {
      console.log('Tentativa de login recebida:', req.body.email);
      
      // Buscamos um usu√°rio com o email informado
      // √â como procurar na gaveta um boneco com um nome espec√≠fico
      const user = await User.findOne({ email: req.body.email });
      
      console.log('Usu√°rio encontrado:', user ? 'Sim' : 'N√£o');
      
      // Se n√£o encontrarmos o usu√°rio ou a senha estiver errada
      // √â como dizer: "N√£o conhe√ßo voc√™ ou sua chave est√° errada"
      if (!user || user.senha !== req.body.senha) {
        console.log('Senha incorreta ou usu√°rio n√£o encontrado');
        return res.status(401).send("Email ou senha incorretos! üîí");
      }
      
      // Criamos uma c√≥pia do usu√°rio sem a senha para enviar como resposta
      // √â como tirar uma foto do boneco, mas sem mostrar uma parte dele
      const userSemSenha = {
        _id: user._id,
        nome: user.nome,
        nomeCompleto: user.nomeCompleto,
        email: user.email,
        dataCriacao: user.dataCriacao
      };
      
      console.log('Login bem-sucedido para:', user.email);
      
      // Enviamos o usu√°rio como resposta (sem a senha)
      // √â como dizer: "Voc√™ pode entrar! Aqui est√° seu crach√°"
      res.send({
        message: "Login realizado com sucesso! üéâ",
        user: userSemSenha
      });
      console.log('Usu√°rio fez login:', user.nome);
    } catch (error) {
      // Se der erro, enviamos uma mensagem de erro
      console.error('Erro ao processar login:', error);
      res.status(500).send("Erro ao fazer login: " + error.message);
      console.error('Erro ao fazer login:', error);
    }
  },
  
  // Fun√ß√£o para buscar um usu√°rio pelo ID
  // √â como procurar um boneco espec√≠fico na gaveta
  getUserById: async (req, res) => {
    try {
      // Buscamos o usu√°rio pelo ID
      // √â como pedir: "Me d√° aquele boneco com a etiqueta n√∫mero 123"
      // Usamos o m√©todo findOne com _id para substituir o findById
      const user = await User.findOne({_id: req.params.id}).select('-senha');
      
      // Se o usu√°rio n√£o for encontrado
      // √â como n√£o achar o boneco que voc√™ estava procurando
      if (!user) {
        return res.status(404).send("Usu√°rio n√£o encontrado! üòï");
      }
      
      // Enviamos o usu√°rio como resposta
      // √â como entregar o boneco para quem pediu
      res.send(user);
    } catch (error) {
      // Se der erro, enviamos uma mensagem de erro
      res.status(500).send("Erro ao buscar usu√°rio: " + error.message);
      console.error('Erro ao buscar usu√°rio:', error);
    }
  },
  
  // Fun√ß√£o para atualizar um usu√°rio existente
  // √â como mudar o penteado ou a roupa de um boneco
  updateUser: async (req, res) => {
    try {
      // Se quiser mudar a senha, verificamos se as senhas batem
      // √â como verificar se a nova chave funciona
      if (req.body.senha && req.body.senha !== req.body.confirmaSenha) {
        return res.status(400).send("As senhas n√£o coincidem! üîë");
      }
      
      // Preparamos os dados que vamos atualizar
      // √â como separar as novas roupas que o boneco vai usar
      const dadosAtualizados = {
        nome: req.body.nome,
        nomeCompleto: req.body.nomeCompleto,
        email: req.body.email
      };
      
      // S√≥ inclu√≠mos a senha se ela foi enviada
      // √â como s√≥ trocar a fechadura se tiver uma chave nova
      if (req.body.senha) {
        dadosAtualizados.senha = req.body.senha;
      }
      
      // Buscamos o usu√°rio pelo ID e atualizamos com os novos dados
      // √â como pegar o boneco da gaveta e mudar algumas partes dele
      // Substitu√≠mos findByIdAndUpdate por findOneAndUpdate com _id
      const user = await User.findOneAndUpdate(
        {_id: req.params.id}, // ID do usu√°rio a ser atualizado
        dadosAtualizados,
        { new: true } // Esta op√ß√£o faz retornar o documento atualizado
      ).select('-senha'); // N√£o mostramos a senha
      
      // Se o usu√°rio n√£o for encontrado
      // √â como procurar um boneco que n√£o existe
      if (!user) {
        return res.status(404).send("Usu√°rio n√£o encontrado! üòï");
      }
      
      // Enviamos o usu√°rio atualizado como resposta
      // √â como mostrar o boneco depois das mudan√ßas
      res.send(user);
      console.log('Usu√°rio atualizado:', user.nome);
    } catch (error) {
      // Se der erro, enviamos uma mensagem de erro
      res.status(500).send("Erro ao atualizar usu√°rio: " + error.message);
      console.error('Erro ao atualizar usu√°rio:', error);
    }
  },
  
  // Fun√ß√£o para deletar um usu√°rio
  // √â como jogar um boneco fora quando n√£o queremos mais
  deleteUser: async (req, res) => {
    try {
      // Buscamos o usu√°rio pelo ID e o deletamos
      // √â como pegar um boneco espec√≠fico e jogar no lixo
      // Substitu√≠mos findByIdAndDelete por findOneAndDelete com _id
      const user = await User.findOneAndDelete({_id: req.params.id});
      
      // Se o usu√°rio n√£o for encontrado
      // √â como n√£o achar o boneco que voc√™ queria jogar fora
      if (!user) {
        return res.status(404).send("Usu√°rio n√£o encontrado! üòï");
      }
      
      // Enviamos o usu√°rio deletado como resposta (sem a senha)
      // √â como mostrar o boneco que jogamos fora (s√≥ para confirmar)
      const userSemSenha = {
        _id: user._id,
        nome: user.nome,
        nomeCompleto: user.nomeCompleto,
        email: user.email,
        dataCriacao: user.dataCriacao
      };
      
      res.send(userSemSenha);
      console.log('Usu√°rio deletado:', user.nome);
    } catch (error) {
      // Se der erro, enviamos uma mensagem de erro
      res.status(500).send("Erro ao deletar usu√°rio: " + error.message);
      console.error('Erro ao deletar usu√°rio:', error);
    }
  }
};

// Exportamos o controlador para us√°-lo em outros arquivos
// √â como empacotar nossa caixa de ferramentas para levar para outro lugar
module.exports = userController;